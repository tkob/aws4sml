(* {{ service_full_name }} *)
structure {{ structure_name }} = struct
  (* Atomic types *)
  {% for (name, shape) in atomic_types %}
  {%   if shape.type == 'boolean' %}
  type {{ sml_types[name] }} = bool
  {%   elif shape.type == 'integer' %}
  type {{ sml_types[name] }} = LargeInt.int
  {%   elif shape.type == 'long' %}
  type {{ sml_types[name] }} = LargeInt.int
  {%   elif shape.type == 'float' %}
  type {{ sml_types[name] }} = real
  {%   elif shape.type == 'double' %}
  type {{ sml_types[name] }} = real
  {%   elif shape.type == 'string' %}
  type {{ sml_types[name] }} = string
  {%   elif shape.type == 'timestamp' %}
  type {{ sml_types[name] }} = string
  {%   elif shape.type == 'blob' %}
  type {{ sml_types[name] }} = string
  {%   endif %}
  {% endfor %}

  (* Complex types *)
  {% for (name, shape) in complex_types %}
  {%   if shape.type == 'list' %}
  {{'datatype' if loop.first else 'and'}} {{ sml_types[name] }} = {{ sml_constructors[name] }} of {{ sml_types[shape.member.shape] }} list
  {%   elif shape.type == 'map' %}
  {{'datatype' if loop.first else 'and'}} {{ sml_types[name] }} = {{ sml_constructors[name] }} of ({{ sml_types[shape.key.shape] }} * {{ sml_types[shape.value.shape] }}) list
  {%   elif shape.type == 'structure' %}
  {{'datatype' if loop.first else 'and'}} {{ sml_types[name] }} = {{ sml_constructors[name] }} of {
    {% for (name, value) in shape.members.items() %}
    {{ shape.sml_fields[name] }} : {{ sml_types[value.shape] }}{{ ' option' if name not in shape.required }}{{ ',' if not loop.last}}
    {% endfor %}
  }
  {%   endif %}
  {% endfor %}

  (* Exceptions *)
  {% for (name, shape) in exceptions %}
  {%   if shape.members|length == 0 %}
  exception {{ name }}
  {%   else %}
  exception {{ name }} of {
    {% for (name, value) in shape.members.items() %}
    {{ shape.sml_fields[name] }} : {{ sml_types[value.shape] }}{{ ',' if not loop.last}}
    {% endfor %}
  }
  {%   endif %}
  {% endfor %}

  (* Printers *)
  {% for (name, shape) in atomic_types %}
  {%   if shape.type == 'boolean' %}
  val {{ sml_types[name] }}ToJson = Bool.toString
  {%   elif shape.type == 'integer' %}
  val {{ sml_types[name] }}ToJson = LargeInt.toString
  {%   elif shape.type == 'long' %}
  val {{ sml_types[name] }}ToJson = LargeInt.toString
  {%   elif shape.type == 'float' %}
  val {{ sml_types[name] }}ToJson = Real.toString
  {%   elif shape.type == 'double' %}
  val {{ sml_types[name] }}ToJson = Real.toString
  {%   elif shape.type == 'string' %}
  fun {{ sml_types[name] }}ToJson s = "\"" ^ String.toString s ^ "\""
  {%   elif shape.type == 'timestamp' %}
  fun {{ sml_types[name] }}ToJson s = "\"" ^ String.toString s ^ "\""
  {%   elif shape.type == 'blob' %}
  fun {{ sml_types[name] }}ToJson s = "\"" ^ String.toString s ^ "\""
  {%   endif %}
  {% endfor %}
  {% for (name, shape) in complex_types %}
  {%   if shape.type == 'list' %}
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}ToJson ({{ sml_constructors[name] }} l) =
    "[" ^ String.concatWith ", " (map {{ sml_types[shape.member.shape] }}ToJson l) ^ "]"
  {%   elif shape.type == 'map' %}
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}ToJson ({{ sml_constructors[name] }} m) =
    "{" ^ String.concatWith ", " (map (fn (k, v) => "\"" ^ k ^  "\": " ^ {{ sml_types[shape.value.shape] }}ToJson v) m) ^ "}"
  {%   elif shape.type == 'structure' %}
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}ToJson ({{ sml_constructors[name] }} { {{ ', '.join(shape.sml_fields.values()) }} }) =
    let
      val entries'' = []
      {% for field_name, field_shape in shape.members.items()|sort %}
      {%   if field_name in shape.required %}
      val entries'' = ("\"{{ field_name }}\": " ^ {{ sml_types[field_shape.shape] }}ToJson {{ shape.sml_fields[field_name]}})::entries''
      {%   else %}
      val entries'' = case {{ shape.sml_fields[field_name] }} of
                         NONE => entries''
                       | SOME {{ shape.sml_fields[field_name] }} => ("\"{{ field_name }}\": " ^ {{ sml_types[field_shape.shape] }}ToJson {{ shape.sml_fields[field_name] }})::entries''
      {%   endif %}
      {% endfor %}
    in
      "{" ^ String.concatWith ", " (rev entries'') ^ "}"
    end
  {%   endif %}
  {% endfor %}
end
