(* {{ metadata.serviceFullName }} *)
functor {{ structure_name }}Fun(val date : unit -> Date.date) = struct
  (*% if 'globalEndpoint' in metadata %*)
  val host = "{{ metadata.globalEndpoint }}"
  (*% else %*)
  fun host region = "{{ metadata.endpointPrefix }}." ^ region ^ ".amazonaws.com"
  (*% endif %*)

  (* Atomic types *)
  (*% for (name, shape) in atomic_types %*)
  (*%   if shape.type == 'boolean' %*)
  type {{ sml_types[name] }} = bool
  (*%   elif shape.type == 'integer' %*)
  type {{ sml_types[name] }} = LargeInt.int
  (*%   elif shape.type == 'long' %*)
  type {{ sml_types[name] }} = LargeInt.int
  (*%   elif shape.type == 'float' %*)
  type {{ sml_types[name] }} = real
  (*%   elif shape.type == 'double' %*)
  type {{ sml_types[name] }} = real
  (*%   elif shape.type == 'string' %*)
  type {{ sml_types[name] }} = string
  (*%   elif shape.type == 'timestamp' %*)
  type {{ sml_types[name] }} = string
  (*%   elif shape.type == 'blob' %*)
  type {{ sml_types[name] }} = string
  (*%   endif %*)
  (*% endfor %*)

  (* Complex types *)
  (*% for (name, shape) in complex_types %*)
  (*%   if shape.type == 'list' %*)
  {{'datatype' if loop.first else 'and'}} {{ sml_types[name] }} = {{ sml_constructors[name] }} of {{ sml_types[shape.member.shape] }} list
  (*%   elif shape.type == 'map' %*)
  {{'datatype' if loop.first else 'and'}} {{ sml_types[name] }} = {{ sml_constructors[name] }} of ({{ sml_types[shape.key.shape] }} * {{ sml_types[shape.value.shape] }}) list
  (*%   elif shape.type == 'structure' %*)
  {{'datatype' if loop.first else 'and'}} {{ sml_types[name] }} = {{ sml_constructors[name] }} of {
    (*% for (name, value) in shape.members.items() %*)
    {{ shape.sml_fields[name] }} : {{ sml_types[value.shape] }}{{ ' option' if name not in shape.required }}{{ ',' if not loop.last}}
    (*% endfor %*)
  }
  (*%   endif %*)
  (*% endfor %*)

  (* Exceptions *)
  (*% for (name, shape) in exceptions %*)
  (*%   if shape.members|length == 0 %*)
  exception {{ name }}
  (*%   else %*)
  exception {{ name }} of {
    (*% for (name, value) in shape.members.items() %*)
    {{ shape.sml_fields[name] }} : {{ sml_types[value.shape] }}{{ ',' if not loop.last}}
    (*% endfor %*)
  }
  (*%   endif %*)
  (*% endfor %*)

  (* Printers *)
  (*% for (name, shape) in atomic_types %*)
  (*%   if shape.type == 'boolean' %*)
  val {{ sml_types[name] }}ToJson = Bool.toString
  (*%   elif shape.type == 'integer' %*)
  val {{ sml_types[name] }}ToJson = LargeInt.toString
  (*%   elif shape.type == 'long' %*)
  val {{ sml_types[name] }}ToJson = LargeInt.toString
  (*%   elif shape.type == 'float' %*)
  val {{ sml_types[name] }}ToJson = Real.toString
  (*%   elif shape.type == 'double' %*)
  val {{ sml_types[name] }}ToJson = Real.toString
  (*%   elif shape.type == 'string' %*)
  fun {{ sml_types[name] }}ToJson s = "\"" ^ String.toString s ^ "\""
  (*%   elif shape.type == 'timestamp' %*)
  fun {{ sml_types[name] }}ToJson s = "\"" ^ String.toString s ^ "\""
  (*%   elif shape.type == 'blob' %*)
  fun {{ sml_types[name] }}ToJson s = "\"" ^ String.toString s ^ "\""
  (*%   endif %*)
  (*% endfor %*)
  (*% for (name, shape) in complex_types %*)
  (*%   if shape.type == 'list' %*)
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}ToJson ({{ sml_constructors[name] }} l) =
    "[" ^ String.concatWith ", " (map {{ sml_types[shape.member.shape] }}ToJson l) ^ "]"
  (*%   elif shape.type == 'map' %*)
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}ToJson ({{ sml_constructors[name] }} m) =
    "{" ^ String.concatWith ", " (map (fn (k, v) => "\"" ^ k ^  "\": " ^ {{ sml_types[shape.value.shape] }}ToJson v) m) ^ "}"
  (*%   elif shape.type == 'structure' %*)
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}ToJson ({{ sml_constructors[name] }} { {{ ', '.join(shape.sml_fields.values()) }} }) =
    let
      val entries'' = []
      (*% for field_name, field_shape in shape.members.items()|sort %*)
      (*%   if field_name in shape.required %*)
      val entries'' = ("\"{{ field_name }}\": " ^ {{ sml_types[field_shape.shape] }}ToJson {{ shape.sml_fields[field_name]}})::entries''
      (*%   else %*)
      val entries'' = case {{ shape.sml_fields[field_name] }} of
                         NONE => entries''
                       | SOME {{ shape.sml_fields[field_name] }} => ("\"{{ field_name }}\": " ^ {{ sml_types[field_shape.shape] }}ToJson {{ shape.sml_fields[field_name] }})::entries''
      (*%   endif %*)
      (*% endfor %*)
    in
      "{" ^ String.concatWith ", " (rev entries'') ^ "}"
    end
  (*%   endif %*)
  (*% endfor %*)

  (* Common functions *)
  fun lookup (xs, name) =
        let
          fun lookup' [] = NONE
            | lookup' ((name', value)::xs) =
                if name = name' then SOME value
                else lookup' xs
        in
          lookup' xs
        end

  infix >>=
  fun (SOME x) >>= k = k x
    | NONE     >>= k = NONE

  (* Parsers *)
  (*% for (name, shape) in atomic_types %*)
  (*%   if shape.type == 'boolean' %*)
  fun {{ sml_types[name] }}FromJson (JSON.BOOL x) = SOME x
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'integer' %*)
  fun {{ sml_types[name] }}FromJson (JSON.INT x) = SOME (IntInf.toLarge x)
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'long' %*)
  fun {{ sml_types[name] }}FromJson (JSON.INT x) = SOME (IntInf.toLarge x)
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'float' %*)
  fun {{ sml_types[name] }}FromJson (JSON.FLOAT x) = SOME x
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'double' %*)
  fun {{ sml_types[name] }}FromJson (JSON.FLOAT x) = SOME x
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'string' %*)
  fun {{ sml_types[name] }}FromJson (JSON.STRING x) = SOME x
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'timestamp' %*)
  fun {{ sml_types[name] }}FromJson (JSON.STRING x) = SOME x
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'blob' %*)
  fun {{ sml_types[name] }}FromJson (JSON.STRING x) = SOME x
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   endif %*)
  (*% endfor %*)
  (*% for (name, shape) in complex_types %*)
  (*%   if shape.type == 'list' %*)
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}FromJson (JSON.ARRAY xs) =
        let
          fun loop ([], acc) = SOME ({{ sml_constructors[name] }} (rev acc))
            | loop (x::xs, acc) = (
                case {{ sml_types[shape.member.shape] }}FromJson x of
                     NONE => NONE
                   | SOME x => loop (xs, x::acc))
        in
          loop (xs, [])
        end
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'map' %*)
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}FromJson (JSON.OBJECT xs) =
        let
          fun loop ([], acc) = SOME ({{ sml_constructors[name] }} (rev acc))
            | loop ((name, value)::xs, acc) = (
                case {{ sml_types[shape.value.shape] }}FromJson value of
                     NONE => NONE
                   | SOME value => loop (xs, (name, value)::acc))
        in
          loop (xs, [])
        end
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   elif shape.type == 'structure' %*)
  {{'fun' if loop.first else 'and'}} {{ sml_types[name] }}FromJson (JSON.OBJECT xs) = (
      (*% for field_name, field_shape in shape.members.items()|sort %*)
      (*%   if field_name in shape.required %*)
      case lookup (xs, "{{ field_name }}") >>= {{ sml_types[field_shape.shape] }}FromJson of
           NONE => NONE
         | SOME {{ shape.sml_fields[field_name] }} =>
      (*%   else %*)
      case lookup (xs, "{{ field_name }}") >>= {{ sml_types[field_shape.shape] }}FromJson of
           {{ shape.sml_fields[field_name] }} =>
      (*%   endif %*)
      (*% endfor %*)
      (*% if shape.members|length == 0 %*)
      SOME ({{ sml_constructors[name] }} {})
      (*% else %*)
      (*%   for field_name, field_shape in shape.members.items()|sort %*)
      (*%     if loop.first and loop.last %*)
      SOME ({{ sml_constructors[name] }} {
        {{ shape.sml_fields[field_name] }} = {{ shape.sml_fields[field_name] }} })
      (*%     elif loop.first %*)
      SOME ({{ sml_constructors[name] }} {
        {{ shape.sml_fields[field_name] }} = {{ shape.sml_fields[field_name] }},
      (*%     elif not loop.last %*)
        {{ shape.sml_fields[field_name] }} = {{ shape.sml_fields[field_name] }},
      (*%     else %*)
        {{ shape.sml_fields[field_name] }} = {{ shape.sml_fields[field_name] }} })
      (*%     endif %*)
      (*%   endfor %*)
      (*% endif %*)
      )
    | {{ sml_types[name] }}FromJson _ = NONE
  (*%   endif %*)
  (*% endfor %*)

  (* Operations *)
  (*% for (name, operation) in operations %*)
  (*%   if operation.http.method == 'POST' %*)
  fun {{ sml_operations[name] }}'
          (readWrite as {read, writeAll})
          (credentials as (accessKey, secret))
          region
          (*% if 'input' in operation %*)
          (sock, request)
          (*% else %*)
          sock
          (*% endif %*)
          =
        let
          val host = host region
          val service = "{{ metadata.endpointPrefix }}"
          (*% if 'input' in operation %*)
          val jsonRequest = {{ sml_types[operation.input.shape] }}ToJson request
          (*% else %*)
          val jsonRequest = ""
          (*% endif %*)
          val httpRequest = {
            method = "{{ operation.http.method }}",
            path = URI.Path.fromString "{{ operation.http.requestUri }}",
            query = URI.Query.fromList [],
            header = HttpHeader.fromList [
              ("Content-Length", Int.toString (String.size jsonRequest)),
              (*% if metadata.targetPrefix != None %*)
              ("X-Amz-Target", "{{ metadata.targetPrefix }}.{{ name }}"),
              (*% else %*)
              ("X-Amz-Target", "{{ name }}"),
              (*% endif %*)
              ("Content-Type", "application/x-amz-json-{{ metadata.jsonVersion }}")
            ],
            messageBody = jsonRequest
          }
        in
          Aws4Client.doRequest
            {read = read, writeAll = writeAll}
            (host, region, service, accessKey, secret)
            (sock, date (), httpRequest)
        end
  (*%   endif %*)
  (*% endfor %*)
end

structure {{ structure_name }} = {{ structure_name }}Fun(
  val date = fn () => Date.fromTimeUniv (Time.now ()))
